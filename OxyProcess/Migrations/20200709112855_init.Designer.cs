// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OxyProcess.Data;

namespace OxyProcess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200709112855_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OxyProcess.Models.Account.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IndustryId");

                    b.Property<long>("NoOfEmployees");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("OxyProcess.Models.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Role_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("OxyProcess.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("User_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("Phone");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Suspended");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users_Master");
                });

            modelBuilder.Entity("OxyProcess.Models.FormTag.FilesManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId");

                    b.Property<string>("FieldName");

                    b.Property<string>("FileType");

                    b.Property<int>("FormdataEntryId");

                    b.Property<string>("Name");

                    b.Property<int>("TagId");

                    b.Property<int>("TemplateuniqueId");

                    b.HasKey("Id");

                    b.ToTable("FilesManager");
                });

            modelBuilder.Entity("OxyProcess.Models.FormTag.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("TagCode");

                    b.Property<string>("TagNumber");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("OxyProcess.Models.FormTag.TagFormDataEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FormJsonData");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LastModifyBy");

                    b.Property<int>("OrignalTemplateId");

                    b.Property<int>("TagId");

                    b.Property<int>("TemplateuniqueId");

                    b.HasKey("Id");

                    b.ToTable("TagFormDataEntry");
                });

            modelBuilder.Entity("OxyProcess.Models.FormTag.TaginsideTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("GroupId");

                    b.Property<string>("GroupName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFilled");

                    b.Property<int>("OrignalTemplateId");

                    b.Property<int>("TagId");

                    b.Property<string>("TemplateCloneCode");

                    b.Property<int>("TemplateuniqueId");

                    b.Property<int>("UpdateById");

                    b.HasKey("Id");

                    b.ToTable("TaginsideTemplates");
                });

            modelBuilder.Entity("OxyProcess.Models.FormTag.TemplateFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int>("LastModifyBy");

                    b.Property<string>("LatestValue");

                    b.Property<int>("TagId");

                    b.Property<int>("TemplateId");

                    b.Property<int>("TemplateuniqueId");

                    b.Property<string>("label");

                    b.Property<string>("name");

                    b.Property<string>("subtype");

                    b.Property<string>("type");

                    b.Property<string>("value");

                    b.HasKey("Id");

                    b.ToTable("TemplateFields");
                });

            modelBuilder.Entity("OxyProcess.Models.Group.GroupMembers", b =>
                {
                    b.Property<long>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GroupId");

                    b.Property<long>("UserId");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("OxyProcess.Models.Group.GroupPermission", b =>
                {
                    b.Property<long>("GroupPermisionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<bool>("Edit");

                    b.Property<long>("GroupId");

                    b.Property<bool>("None");

                    b.Property<bool>("Read");

                    b.Property<bool>("Write");

                    b.HasKey("GroupPermisionId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupPermission");
                });

            modelBuilder.Entity("OxyProcess.Models.Group.Groups", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("OxyProcess.Models.Industry.industries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("industrieType");

                    b.HasKey("Id");

                    b.ToTable("industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            industrieType = "Aerospace"
                        },
                        new
                        {
                            Id = 2,
                            industrieType = "Automotive"
                        },
                        new
                        {
                            Id = 3,
                            industrieType = "Bio - medical & Analytical"
                        },
                        new
                        {
                            Id = 4,
                            industrieType = "Chemical Processing"
                        },
                        new
                        {
                            Id = 5,
                            industrieType = "Defense"
                        },
                        new
                        {
                            Id = 6,
                            industrieType = "Diesel & Gas Engines"
                        },
                        new
                        {
                            Id = 7,
                            industrieType = "Distributor"
                        },
                        new
                        {
                            Id = 8,
                            industrieType = "Food & Beverage"
                        },
                        new
                        {
                            Id = 9,
                            industrieType = "Heavy Machinery / Equipment"
                        },
                        new
                        {
                            Id = 10,
                            industrieType = "Industrial OEM"
                        },
                        new
                        {
                            Id = 11,
                            industrieType = "Mechanical Seals"
                        },
                        new
                        {
                            Id = 12,
                            industrieType = "Motorsport"
                        },
                        new
                        {
                            Id = 13,
                            industrieType = "Oil & Gas"
                        },
                        new
                        {
                            Id = 14,
                            industrieType = "Oil & Gas Pumps / Valves"
                        },
                        new
                        {
                            Id = 15,
                            industrieType = "Petrochemical"
                        },
                        new
                        {
                            Id = 16,
                            industrieType = "Pharmaceutical"
                        },
                        new
                        {
                            Id = 17,
                            industrieType = "Power"
                        },
                        new
                        {
                            Id = 18,
                            industrieType = "Pumps & Valves"
                        },
                        new
                        {
                            Id = 19,
                            industrieType = "Other"
                        });
                });

            modelBuilder.Entity("OxyProcess.Models.Template.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Groups")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TemplateCode")
                        .IsRequired();

                    b.Property<string>("TemplateName")
                        .IsRequired();

                    b.Property<int>("TemplateTypeId");

                    b.HasKey("TemplateId");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("OxyProcess.Models.Template.TemplateType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TemplateTypeName");

                    b.HasKey("TypeId");

                    b.ToTable("TemplateType");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            TemplateTypeName = "Regular Form"
                        },
                        new
                        {
                            TypeId = 2,
                            TemplateTypeName = "Report Card"
                        });
                });

            modelBuilder.Entity("OxyProcess.Models.UserAddress.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("City");

                    b.Property<int>("CountryId");

                    b.Property<int>("StateId");

                    b.Property<string>("ZipCode");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("OxyProcess.Models.UserAddress.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "USA"
                        });
                });

            modelBuilder.Entity("OxyProcess.Models.UserAddress.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<string>("StateName");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            CountryId = 1,
                            StateName = "Alaska"
                        },
                        new
                        {
                            StateId = 2,
                            CountryId = 1,
                            StateName = "Arizona"
                        },
                        new
                        {
                            StateId = 3,
                            CountryId = 1,
                            StateName = "Arkansas"
                        },
                        new
                        {
                            StateId = 4,
                            CountryId = 1,
                            StateName = "California"
                        },
                        new
                        {
                            StateId = 5,
                            CountryId = 1,
                            StateName = "Colorado"
                        },
                        new
                        {
                            StateId = 6,
                            CountryId = 1,
                            StateName = "Connecticut"
                        },
                        new
                        {
                            StateId = 7,
                            CountryId = 1,
                            StateName = "Delaware"
                        },
                        new
                        {
                            StateId = 8,
                            CountryId = 1,
                            StateName = "Alabama"
                        },
                        new
                        {
                            StateId = 9,
                            CountryId = 1,
                            StateName = "District of Columbia"
                        },
                        new
                        {
                            StateId = 10,
                            CountryId = 1,
                            StateName = "Florida"
                        },
                        new
                        {
                            StateId = 11,
                            CountryId = 1,
                            StateName = "Georgia"
                        },
                        new
                        {
                            StateId = 12,
                            CountryId = 1,
                            StateName = "Hawaii"
                        },
                        new
                        {
                            StateId = 13,
                            CountryId = 1,
                            StateName = "Idaho"
                        },
                        new
                        {
                            StateId = 14,
                            CountryId = 1,
                            StateName = "Illinois"
                        },
                        new
                        {
                            StateId = 15,
                            CountryId = 1,
                            StateName = "Indiana"
                        },
                        new
                        {
                            StateId = 16,
                            CountryId = 1,
                            StateName = "Iowa"
                        },
                        new
                        {
                            StateId = 17,
                            CountryId = 1,
                            StateName = "Kansas"
                        },
                        new
                        {
                            StateId = 18,
                            CountryId = 1,
                            StateName = "Kentucky"
                        },
                        new
                        {
                            StateId = 19,
                            CountryId = 1,
                            StateName = "Louisiana"
                        },
                        new
                        {
                            StateId = 20,
                            CountryId = 1,
                            StateName = "Maine"
                        },
                        new
                        {
                            StateId = 21,
                            CountryId = 1,
                            StateName = "Maryland"
                        },
                        new
                        {
                            StateId = 22,
                            CountryId = 1,
                            StateName = "Massachusetts"
                        },
                        new
                        {
                            StateId = 23,
                            CountryId = 1,
                            StateName = "Michigan"
                        },
                        new
                        {
                            StateId = 24,
                            CountryId = 1,
                            StateName = "Minnesota"
                        },
                        new
                        {
                            StateId = 25,
                            CountryId = 1,
                            StateName = "Mississippi"
                        },
                        new
                        {
                            StateId = 26,
                            CountryId = 1,
                            StateName = "Missouri"
                        },
                        new
                        {
                            StateId = 27,
                            CountryId = 1,
                            StateName = "Montana"
                        },
                        new
                        {
                            StateId = 28,
                            CountryId = 1,
                            StateName = "Nebraska"
                        },
                        new
                        {
                            StateId = 29,
                            CountryId = 1,
                            StateName = "Nevada"
                        },
                        new
                        {
                            StateId = 30,
                            CountryId = 1,
                            StateName = "New Hampshire"
                        },
                        new
                        {
                            StateId = 31,
                            CountryId = 1,
                            StateName = "New Jersey"
                        },
                        new
                        {
                            StateId = 32,
                            CountryId = 1,
                            StateName = "New Mexico"
                        },
                        new
                        {
                            StateId = 33,
                            CountryId = 1,
                            StateName = "New York"
                        },
                        new
                        {
                            StateId = 34,
                            CountryId = 1,
                            StateName = "North Carolina"
                        },
                        new
                        {
                            StateId = 35,
                            CountryId = 1,
                            StateName = "North Dakota"
                        },
                        new
                        {
                            StateId = 36,
                            CountryId = 1,
                            StateName = "Ohio"
                        },
                        new
                        {
                            StateId = 37,
                            CountryId = 1,
                            StateName = "Oklahoma"
                        },
                        new
                        {
                            StateId = 38,
                            CountryId = 1,
                            StateName = "Oregon"
                        },
                        new
                        {
                            StateId = 39,
                            CountryId = 1,
                            StateName = "Pennsylvania"
                        },
                        new
                        {
                            StateId = 40,
                            CountryId = 1,
                            StateName = "Rhode Island"
                        },
                        new
                        {
                            StateId = 41,
                            CountryId = 1,
                            StateName = "South Carolina"
                        },
                        new
                        {
                            StateId = 42,
                            CountryId = 1,
                            StateName = "South Dakota"
                        },
                        new
                        {
                            StateId = 43,
                            CountryId = 1,
                            StateName = "Tennessee"
                        },
                        new
                        {
                            StateId = 44,
                            CountryId = 1,
                            StateName = "Texas"
                        },
                        new
                        {
                            StateId = 45,
                            CountryId = 1,
                            StateName = "Utah"
                        },
                        new
                        {
                            StateId = 46,
                            CountryId = 1,
                            StateName = "Vermont"
                        },
                        new
                        {
                            StateId = 47,
                            CountryId = 1,
                            StateName = "Virginia"
                        },
                        new
                        {
                            StateId = 48,
                            CountryId = 1,
                            StateName = "Washington"
                        },
                        new
                        {
                            StateId = 49,
                            CountryId = 1,
                            StateName = "West Virginia"
                        },
                        new
                        {
                            StateId = 50,
                            CountryId = 1,
                            StateName = "Wisconsin"
                        },
                        new
                        {
                            StateId = 51,
                            CountryId = 1,
                            StateName = "Wyoming"
                        });
                });

            modelBuilder.Entity("OxyProcess.Models.Worker.WorkerPasswords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("WorkerId");

                    b.Property<string>("WorkerPassword");

                    b.HasKey("Id");

                    b.ToTable("WorkerPasswords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("OxyProcess.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("OxyProcess.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("OxyProcess.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("OxyProcess.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OxyProcess.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("OxyProcess.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OxyProcess.Models.ApplicationUser", b =>
                {
                    b.HasOne("OxyProcess.Models.UserAddress.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OxyProcess.Models.Account.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("OxyProcess.Models.Group.GroupMembers", b =>
                {
                    b.HasOne("OxyProcess.Models.Group.Groups", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OxyProcess.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OxyProcess.Models.Group.GroupPermission", b =>
                {
                    b.HasOne("OxyProcess.Models.Group.Groups", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OxyProcess.Models.Template.Template", b =>
                {
                    b.HasOne("OxyProcess.Models.Template.TemplateType", "TemplateType")
                        .WithMany()
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OxyProcess.Models.UserAddress.Address", b =>
                {
                    b.HasOne("OxyProcess.Models.UserAddress.Country", "Countries")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OxyProcess.Models.UserAddress.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OxyProcess.Models.UserAddress.State", b =>
                {
                    b.HasOne("OxyProcess.Models.UserAddress.Country", "Countries")
                        .WithMany("States")
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
